# Matomo release action for automated PREVIEW releases
#
# Required GitHub secrets:
#
# GPG_CERTIFICATE  |  ASCII armored or Base64 encoded GPG certificate that is used to create the signatures for the archives
# GPG_CERTIFICATE_PASS  |  Passphrase of the GPG key

name: Build preview release

permissions:
  actions: none
  checks: none
  contents: write  # required to create tag and release
  deployments: none
  issues: none
  packages: none
  pull-requests: none
  repository-projects: none
  security-events: none
  statuses: none

on:
  workflow_dispatch:
    branches:
      - 5.x-dev

jobs:
  preview-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: false

      - name: Check if there are any changes to release
        run: |
          CHANGED_FILES=$(git diff --name-only 5.x-dev 5.x-preview^1 | wc -l)
          if [ "$CHANGED_FILES" -eq 0 ]; then
            echo "No changes since last preview version was created"
            exit 0
          fi

      - name: Determine new preview version number
        run: |
          OLD_VERSION=$(php -r "include_once 'core/Version.php'; echo \Piwik\Version::VERSION;")
          NEW_VERSION=$(php -r "include_once 'core/Version.php'; \$v = new \Piwik\Version(); echo \$v->nextPreviewVersion(\Piwik\Version::VERSION);")
          
          if [ "$NEW_VERSION" == "" ]; then
            exit 1
          fi
          
          PREVIEW_BRANCH="preview-${NEW_VERSION}"
          
          echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "PREVIEW_BRANCH=$PREVIEW_BRANCH" >> $GITHUB_ENV

      - name: Prepare git config
        run: |
          cat <<- EOF > $HOME/.netrc
            machine github.com
            login $GITHUB_ACTOR
            password $GITHUB_TOKEN
            machine api.github.com
            login $GITHUB_ACTOR
            password $GITHUB_TOKEN
          EOF
          chmod 600 $HOME/.netrc
          git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git config --global user.name "$GITHUB_ACTOR"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create a new branch
        run: |
          git checkout -b $PREVIEW_BRANCH

      - name: Update version
        run: |
          sed -i "s/VERSION = '${OLD_VERSION}';/VERSION = '${NEW_VERSION}';/g" core/Version.php
          cat core/Version.php

      - name: Commit changes
        run: |
          git add core/Version.php
          git commit -m "Update version to ${NEW_VERSION}"

      - name: Push changes
        run: |
          git push --set-upstream origin $PREVIEW_BRANCH

#      - name: Run tests for preview version branch

      - name: Merge into 5.x-preview
        run: |
          git checkout -B 5.x-preview refs/remotes/origin/5.x-preview
          git merge --squash $PREVIEW_BRANCH
          git commit -m "Update version to ${NEW_VERSION}"
          git push --set-upstream origin 5.x-preview

      - name: Delete temporary release branch
        run: |
          git branch -d $PREVIEW_BRANCH
          git push origin --delete $PREVIEW_BRANCH

#      - name: Import GPG key
#        id: import_gpg
#        run: |
#          echo "${{ secrets.GPG_CERTIFICATE }}" > $HOME/private.asc
#          gpg --import --batch --yes $HOME/private.asc
#          echo "default-cache-ttl 7200
#          max-cache-ttl 31536000
#          allow-preset-passphrase" > $HOME/.gnupg/gpg-agent.conf
#          keygrip=$(gpg --import --import-options show-only --with-keygrip $HOME/private.asc | grep "Keygrip" | grep -oP "([A-F0-9]+)" | head -1)
#          hexPassphrase=$( echo -n '${{ secrets.GPG_CERTIFICATE_PASS }}' | od -A n -t x1 -w100 | sed 's/ *//g' )
#          gpg-connect-agent "RELOADAGENT" /bye
#          gpg-connect-agent "PRESET_PASSPHRASE ${keygrip} -1 ${hexPassphrase}" /bye
#          gpg-connect-agent "KEYINFO ${keygrip}" /bye
#
      - name: Create tag, build and publish release
        id: tag
        run: |
          echo "Version to build: '${NEW_VERSION}'"

          git fetch --tags -q 2>/dev/null
          tag_exists=$( git tag --list "$NEW_VERSION" )

          if [[ -n "$tag_exists" ]]
          then
            echo "A tag for $tag_exists already exists."
            exit 1
          fi

          echo "Creating a tag for $NEW_VERSION"

          git tag $NEW_VERSION
          git push origin tags/$NEW_VERSION

          body="## Matomo ${version} (Pre-release)

          We recommend to read [this FAQ](https://matomo.org/faq/how-to-update/faq_159/) before using a pre-release in a production environment.

          Please use the attached archives for installing or updating Matomo.
          The source code download is only meant for developers and will require extra work to install it.
           - Latest stable production release can be found at https://matomo.org/download/ ([learn more](https://matomo.org/docs/installation/)) (recommended)
           - Beta and Release Candidate releases can be found at https://builds.matomo.org/ ([learn more](https://matomo.org/faq/how-to-update/faq_159/))"

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo 'body<<EOF' >> $GITHUB_OUTPUT
          echo "$body" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

          cd $GITHUB_WORKSPACE
          chmod 755 ./.github/scripts/*.sh
          ./.github/scripts/build-package.sh $NEW_VERSION
        shell: bash

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "archives/matomo-${{ steps.tag.outputs.version }}.*,archives/piwik-${{ steps.tag.outputs.version }}.*"
          allowUpdates: false
          tag: ${{ steps.tag.outputs.version }}
          body: "${{ steps.tag.outputs.body }}"
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}
